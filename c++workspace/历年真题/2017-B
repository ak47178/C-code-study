一、简答题（每小题10分，共20分）
1.一个c语言程序的结构特点有哪些？
答：(1):一个程序有一个或多个源程序文件组成；
	1.1:预处理指令
	1.2:全局声明
	1.3:函数定义
    (2):函数是c程序的主要组成部分
    (3):一个函数包括两个部分
	3.1:函数首部
	3.2:函数体
    (4):程序总是从main函数开始执行
    (5):程序中对计算机的操作是由函数中c语句完成的。
    (6):每个数据的声明和语句的最后都必须有一个分号。
    (7):c语言本身不提供输入输出语句。
    (8):程序应当包含注释。
总结：主要考虑程序结构，包含哪些，他们的一些特点。
题目出处：第一章1.4.2
2.什么是函数的形参与实参，他们是如何完成函数的调用的过程的？
答： 在定义函数时，函数名后面括号中变量称为“形式参数”
    在主函数调用函数时，函数名后面扩放中的变量被称为“实际参数”
    在函数调用过程中系统会将实际参数值传递给被调用函数的形参，即形参从实参中得到一个值，该值在函数调用期间有效，可以参与该函数中的计算。
考题出处：7.3.2函数调用时的数据传递。    
二、程序阅读题（每小题6分，共30分）
1.（错）
#include<stdio.h>
int a=100;
void s(){
  static int a=20;
  a++;
  printf("%d\n",a);
}
void main(){
  int i;
  for(i=1;i<=3;i++){
    a++;
    printf("%d",a);
    s();
  }
}
程序运行后输出的结果：103 21 正解 10121
				10222
				10323				
总结：(1)注意题目中的printf()语句在for循环中，即会执行三次，所以一定会输出三次
      (2):全局变量:在函数之外定义的变量称为外部变量，即为全局变量，全局变量可以为本文件的其他函数所共用。作用域为：从定义变量的位置开始到本源文件结束
      	  局部变量:定义在函数内的变量，作用域为本函数。
      (3):变量的储存方式：静态存储（static）、动态存储(auto)、寄存器储存(register)和外部存储(extern)
      	  静态变量(static):用关键字static进行声明，函数调用结束后，局部变量的值继续保留原来的值。
	  		  变量的值在函数调用结束后不消失而继续保留原来的值，函数再次调用时，该值为上次调用结束时的值。
	  动态变量(auto):函数中的局部变量，如果不专门什么(static)储存类别，都是动态的分配存储空间，数据存储在动态存储区中。
	  		在调用函数时，系统自动分配存储空间，函数结束调用就自动释放这些存储空间
	  寄存器变量(register):一个变量被频繁的使用就可以使用register进行声明，可以将此变量存放在寄存器中，可以提高执行效率，
	  		      但现在计算机的性能越来越来越高，优化的编译系统能够自动将这些频繁调用的变量放在寄存器中。
	  外部变量声明(extern):如果外部变量不在文件的开头进行定义，那该变量的作用与即变量的位置到文件结束，
	  		      但如果变量定义的位置前，需要引用这个变量，就可以声明为extern.
			     
2.	
#include<stdio.h>
void main(){
  int x=15;
  while(x<20){
    x++;
    if(x/3!=0){
      x++;
      break;
    }else
      continue;
  }
  printf("%d\n",x);
}
程序运行输出的结果：19  注意  x/3,是求余还是整除 正确：17
总结： /:整除，只保留整数部分，舍弃小数点之后，
      %：求余，即求余数。            
3.
#include<stdio.h>
int f(int a){
	int b=0;
	static c=3;
	b=b+1;
	c=c+1;
	return a+b+c;
} 
void main(){
	int a=2,i;
	for(i=0; i<3; i++)
		printf("%2d", f(a));
}
程序运行后的输出结果为：7 正确：7 8 9
总结：(1):输出语句在for循环之中，for循环执行三次，所以会输出三次。
     (2):static定义的局部变量，程序执行完不会释放，且保留程序执行完之后的值。再次调用函数时，就引用上次最后执行的值。
注；千万要注意循环中的输出。
4.
#include<stdio.h>
int sum(int n){ 
	int p=1,s=0,i;
	for(i=1;i<=n;i++) 
		s+=(p*=i);
	return s;
}

void main(){ 
	printf("sum(5)=%d\n",sum(5));
}
程序运行后的输出结果为：sum(5)=153
考点：混合运算的先后次序。
5.
#include<stdio.h>
int runc(int a,int b){
	return(a+b);
}
 
void main(){
	int x=2,y=5,z=8,r;
	r=runc(runc(x,y),z);
	printf("%d\n",r);
}
考点：函数重复调用，由括号的里到外
程序运行后的输出结果为：15
三、根据流程图写出相应的程序（每小题10分，共10分）
#include<stdio.h>
int main(){
  int n=1,total=0,m;
  printf("请输入m的值：\n");
  scanf("%d",&m);
  for(;n<=m;n++){
    total=total+n*n;
  }
  printf("%d",total);
  return 0;
}
四、程序填空（每空3分，共30分）
1.设计一个程序，计算序列：2/1，3/2，5/3，8/5，13/8，21/13前20项之和.
#include "stdio.h" 
#include "conio.h" 
void main() {    
		int n,t,number=20;   
		float a=2,b=1,s=0;   
		for(n=1;n<=number;n++){      
			s=s+a/b;      
			   ①   
         ②   
	       ③   
	   }    
		printf("序列前20项之和是 %9.6f\n",s);
}
填空.1:t=a 2:a=a+b 3:b=t
2、已知冒泡排序算法的执行步骤如下：
从后往前，（1）依次比较相邻的元素。如果第一个比第二个小，就交换他们两个，这样一趟过去后，将最小的数字被交换到了最后一位。
（2）然后从倒数第二个数字开始重复步骤（1）中的操作，直到没有任何一对数字需要比较。
请编写程序实现冒泡排序算法。
void bubble_sort(int a[], int n)
{
   int i, j, temp;
     for (j = 0; j < n - 1; j++)
       for (i = 0;   ①   ; i++){
          if(a[i] > a[i + 1]){
                 ②    
                 ③   
                 ④   
          }
      }
}
填空.1:i<=j 2:temp=a[i+1] 3:a[i+1]=a[i] 4:a[i]=temp  注：第一个比第二个小，就交换他们两个这句话可能有问题
3、输入20个数， 求最大数和最小数，以及20个数去掉一个最大数且去掉一个最小数后的平均值。
void main(){ 
int x,min,max,sum,i;
    float aver;
    scanf("%d",&x);
    max=min=x;
    sum=  ①  ;
    for (i=1; i<=20 ;i++)
    {   scanf("%d",&x);
	     sum=   ②   ;
 	     if (x<min) min=x ;
	     else if (x>max) max=x;
    }
    aver=(   ③   )/18.0;
    printf("Max=%d, Min=%d\n",max,min);
    printf("Aver=%.2f\n",aver);
}
填空.1:0 2:sum+x 3:sum-min-max
五、程序设计题（每小题20分，共60分）
1、编写程序，判断101-200之间有多少个素数，并输出所有素数。
注：判断素数的方法：用一个数分别去除2到sqrt(这个数)，如果能被整除，则表明此数不是素数，反之是素数。
#include<stdio.h>
#include<math.h>
int main(){
  int i,j
  for(i=101;i<=200;i++){
    for(j=2;j<sqrt(i);j++)
      if(i%j != 0){
        printf("%d",i);
      }else
        conitnue;
  }
  return 0;
}
2（错）、用递归方法求5!。
#include<stdio.h>
int num(int n){
  n*=(n-1);
  return num(n-1)
}
int main(){
  int num(int n);
  printf("%d",num(5));
  return 0;
}
3、辗转相除法求解两个整数最大公约数的思想是：设两个正整数m、n，求m除以n的余数p，
若p!=0，则将上次的除数做被除数，上次的余数做除数，继续求余数，如此循环下去，直到余数为于零。
如此时的除数不为1的话，则该除数为m、n的最大公约数，否则m、n没有最大公约数。
编写一个函数gys(int m,int n)，用辗转相除法求出它们的最大公约数，返回最大公约数。
#include<stdio.h>
int gys(int m,int n){
  int p,t,
  p=m%n;
  while(p!=0){
    m=n;
    n=p;
    p=m%n;
  }
  if(n!=1){
    printf("%d",n);  
  }else{
    printf("m、n没有最大公约数");
  }
}













