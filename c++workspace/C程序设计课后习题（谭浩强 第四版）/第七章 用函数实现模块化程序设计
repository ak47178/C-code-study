第七章 用函数实现模块化程序设计
一、例题：
例1：想输出以下结果，用函数调用实现。
    *****************
      how do you do !
    *****************
#include<stdio.h>
int main(){
    /*
     * 用函数调用实现结果
     */
    void print_str();//先声明，后调用
    print_str();
    return 0;
}
void print_str(){
    printf("**************\n");
    printf("how do you do!\n");
    printf("***************");
}
2.实参和形参的数据传递
例2.输入两个整数，要求输出其中最大者，要求用函数来找到最大值。
#include<stdio.h>
int main(){
    /*
     * 用函数调用实现结果
     */
    int get_max(),x,y,max;
    scanf("%d,%d",&x,&y);
    max = get_max(x,y);       //实参
    printf("最大值为%d",max);
    return 0;
}
int get_max(int a,int b){     //形参
    int max;
    return (a>b?a:b)
    if(a>b){
	   max=a;
    }else max = b;
    //return max;
}
4.函数的返回值。
例3：将例2做出改变，将在max函数中定义的变量z该为float型，函数返回值的类型与指定的函数类型不同，分析其处理方法。
#include<stdio.h>
int main(){
    /*
     * 用函数调用实现结果
     */
    int get_max(float x,float y),max;
    float x,y;
    scanf("%d,%d",&x,&y);
    max = get_max(x,y);
    printf("最大值为%d",max);
    return 0;
}
int get_max(float a,float b){
    float z;
    z=a>b?a:b;
    return z;
}
例4、输入两个实数，用一个函数求出它们之和。
#include<stdio.h>
int main(){
    /*
     * 用函数调用实现结果
     */
    float sum(float x,float y);
    float x,y,num;
    scanf("%f,%f",&x,&y);
    num = sum(x,y);
    printf("和为：%f",num);
    return 0;
}
float sum(float a,float b){
    float num;
    num=a+b;
    return num;
}
4.函数的嵌套调用
例5、输入4个整数，找出其中最大的数，用函数的嵌套来处理。
#include<stdio.h>
int main(){
    int get_max(int a,int b,int c,int d);
    int a,b,c,d,max;
    scanf("%d,%d,%d,%d",&a,&b,&c,&d);
    max=get_max(a,b,c,d);
    printf("%d",max);
    return 0;
}
int get_max(int a,int b,int c,int d){
    int max(int a,int b); //预先定于需要调用的函数
    int m;
    m=max(a,b);		   //调用该函数
    m=max(m,c);
    m=max(m,d);
    //m=max(max(max(a,b),c),d)
    return m;
}
//定义两两比较，返回最大值
int max(int a,int b){
    return a>b?a:b;
}
7、函数的递归调用
#include<stdio.h>
int main(){
    int f(int x);
    int x=5;
    printf("x:%d",f(x));
    return 0;
}
int f(int x){
    int y,z;
    z=f(y);		//在执行f函数的过程中又要调用f函数。
    return 2*z;
}
例6、有5个学生坐在一起，问第5个学生多少岁，他说比第4个学生大2岁，问第四个学生的岁数，他说比第3个学生大两岁，问第3个学生，又说比第二个学生大两岁问第2个学生，又说比第1个学生大两岁
最后问第一个学生他说是10岁，请问第5个学生多大？
#include<stdio.h>
int main(){
    int old(int n);                 //先定义函数
    printf("第五个人岁数%d",old(5));
    return 0;
}
int old(int n){
    int c;                    
    if(n==1)
	   c=10;
    else
	   c=old(n-1)+2;                 //递归调用。
    return c;
}
例7：用递归求n!.
#include<stdio.h>
int main(){
    int fac(int n);			//函数声明
    int n,y;
    printf("请输入一个整数");
    scanf("%d\n",&n);
    y=fac(n);				//要求几阶
    printf("%d!=%d\n",n,y);
    return 0;
}
int fac(int n){				//定义函数，分三种情况考虑，小于0，==0，==1；其他
    int f;
    if(n<0){
	printf("data is error");
    }else if(n==0||n==1){
	f=1;
    }else{
	f=fac(n-1)*n;
    }
    return f;
例8：汉诺塔问题，有一个塔，塔内有三个座A,B,C，开始是A座有64个盘子，盘子大小不等，大的在下，小的再上，
	现在要把这64个座从A移动到C上，规则是每次只能移动一个盘，在移动的过程中可以利用B座，还是大的在下，小的再上的摆放。
#include<stdio.h>
int main(){
    void hanoi(int n,char one,char two,char three);
    int m=5;
    hanoi(m,'A','B','C');
    return 0;
}
void hanoi(int n,char one,char two,char three){
    /*
     * 将N个盘从one座借助two座移动到three座
     */
    void move(char x,char y);
    if(n==1)
	move(one,three);
    else{
	hanoi(n-1,one,three,two);
	move(one,three);
	hanoi(n-1,two,one,three);
    }
}
void move(char x,char y){
    printf("%c——>%c\n",x,y);
}	
7.7数组作为函数参数
例9、输入10个数要求输出其中最大值的元素和该数是第几个元素。
#include<stdio.h>
int main(){
//    int max(int x,int y);
    int a[10] = {1,5,9,6,4,2,8,3,7,52};
    //用户输入数组
//    for(int i=0;i<10;i++){
//	printf("请输入10个数");
//	scanf("%d",&a[i]);
//    }
    //数组的数进行比较
    int max = a[0];
    int j;
    for(int i=0;i<10;i++){
	if(max<a[i]){
	  j=i;
	  max=a[i];
	}
    }
    printf("最大的数%d,下标为%d",max,j);

    return 0;
}
例10、有一个一维数组score,内放10个学生成绩，求平均成绩
#include<stdio.h>
int main(){
    //定义数组/试题中一般是用户输入
    int score[10] = {98,78,45,56,12,36,69,58,47,35};
    int sum=0;
    //总成绩/10
    for(int i=0;i<10;i++){
	sum +=score[i];
    }
    printf("总成绩为：%d,平均成绩为：%d",sum,sum/10);
    return 0;
}
方案二：使用调用
#include<stdio.h>
int main(){
    float average(float a[10]);
    //定义数组/试题中一般是用户输入
    float score[10] = {98,78,45,56,12,36,69,58,47,35};
    float aver;
    //调用vaerage()函数
    aver = average(score);
    printf("平均成绩为：%f",aver);
    return 0;
}
float average(float a[10]){
    float sum=0,average;
    //求总的分数
    for(int i=0;i<10;i++){
	sum+=a[i];
    }
    average = sum/10;
    return average;
}
例11、有两个班级，分别有30名和35名雪上，调用一个average函数，分别求这两个班的学生的平均成绩
#include<stdio.h>
int main(){
    //需要调用的函数的声明
    float average(float a[10],int num);
    //分别定义两个班的学生成绩
    float class1[10] = {15,45,78,89,56,526,12,457,8,45};
    float class2[5]={50,50,78,56,89};
    printf("class1的班级的平均分为%.2f\n",average(class1,10));
    printf("class1的班级的平均分为%.2f",average(class2,5));
    return 0;
}
float average(float a[10],int num){
    float sum=0,average;
    //求总的分数
    for(int i=0;i<10;i++){
	sum+=a[i];
    }
    average = sum/num;
    return average;
}
例12、用选择法对数组中的10个整数按由小到大排序。    
#include<stdio.h>
int main(){
    /*
     * 选择法：
     * 	  即先将10个数中最小的数与a[0]对换，在将a[1]-a[9]中最小的数与a[1]对换，每一比较一轮，找出一个未经拍戏的数中最小的一个，共比较9轮。
     */
    //声明函数
    void sort(int a[10],int n);
    //定义数组
    int a[10]={1,5,9,7,5,3,4,6,2,12};
    //输出排序之前的数组
    printf("数组排序前：\n");
    for(int i=0;i<10;i++){
	printf("%d  ",a[i]);
    }
    //调用sort()函数进行排序
    sort(a,10);
    //输出排序之后的数组
    printf("数组排序后：\n");
    for(int i=0;i<10;i++){
	printf("%d  ",a[i]);
    }
    return 0;
}
//定义sort()函数
void sort(int arr[],int n){
    int i,j,k,t;
    for(i=0;i<n-1;i++){
	k=i;
	for(j=i+1;j<n;j++){
	    if(arr[j]<arr[k]){
		k=j;
	    }
	}
	t=arr[k];
	arr[k]=arr[i];
	arr[i]=t;
    }
}
7.7.3、多维数组名作函数参数
例13、有一个3x4的矩阵，求所有元素中的最大值。
#include<stdio.h>
int main(){
    int max(int arr[][4]);
    //定义一个二维数组
    int a[3][4] = {{1,2,5,7},{2,4,6,8},{12,15,16,18}};
    //调用max()函数
    printf("最大的值为:%d",max(a));
    return 0;
}
int max(int a[][4]){
    int max_value=a[0][0],i,j;
    for(i=0;i<3;i++){			//一维的循环
	for(j=0;j<4;j++){		//二维循环到数
	    if(a[i][j]>max_value){	//大于就进行赋值
		max_value=a[i][j];
	    }
	}
    }
    return max_value;
}


















