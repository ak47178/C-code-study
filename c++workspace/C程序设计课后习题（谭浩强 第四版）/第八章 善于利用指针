8.1、什么是指针？
8.2、指针变量
8.2.1、使用指针变量的例子
例1：通过指针变量访问整型变量。
#include<stdio.h>
int main(){
    //定义整型变量并出初始化
    int a=100,b=200;
    //定义指向整型数据的指针变量prointer_1,pointer_2
    int *pointer_1,*pointer_2;
    //将变量的地址赋值给指针变量
    pointer_1=&a;
    pointer_2=&b;
    //输出变量a,b
    printf("a=%d,b=%d\n",a,b);
    printf("*pointer_1=%d,*pointer_2=%d",*pointer_1,*pointer_2);
    return 0;
}
例2：输入a和b两个整数，按先大后小的顺序输出。
#include<stdio.h>
int main(){
    /*
     * 用指针的方法来处理这个问题，不交换整型变量的值，而是交换两个指针的变量的值
     * 此程序实际上没有a与b的值并没有改变，至少将指针p1和平p2的指向进行了交换
     * 注 ：指针变量的定义(int *,float *)
     *
     */
    int *p1,*p2,*p,a,b;
    //输入两个整数
    printf("请输入a和b的值：\n");
    scanf("%d,%d",&a,&b);
    //指针变量指向变量
    p1=&a;
    p2=&b;
    //如果a<b 将p1与p2的值进行互换
    if(a<b){
      p=p1;
      p1=p2;
      p2=p;
    }
    //输出值
    printf("a=%d,b=%d\n",a,b);
    printf("max=%d,min=%d\n",*p1,*p2);
    return 0;
}
8.2.4、指针变量作为函数参数
例3：输入a和b两个整数，按先大后小的顺序输出。用函数处理，而且用指针类型的数据做函数参数
#include<stdio.h>
int main(){
    //声明函数
    void swap(int *p1,int *p2);
    //定义变量
    int a,b;
    //定义指针变量
    int *p1,*p2;
    //用户输入数据
    scanf("%d,%d",&a,&b);
    //指针变量的指向
    p1=&a;
    p2=&b;
    //如果a<b，调用swap()函数
    if(a<b) swap(p1,p2);
    //输出
    Printf("max=%d,min=%d\n",a,b);
    return 0;
}
//定义swap()函数
void swap(int *p1,int *p2){
    //将p1与p2的指针指向进行互换。
    int temp;
    temp=*p1;
    *p1=*p2;
    *p2=temp;
}
注：不能企图通过改变指针形参的值而使指针实参的值改变
例4：对输入的两个整数按大小顺序输出。
#include<stdio.h>
int main(){
    /*
     * 尝试调用swap()函数来实现题目要求，在函数中改变形参（指针变量）的值，希望由此改变实参（指针变量）的值
     */
    //声明swap()函数
    void swap(int *p1,int *p2);
    //定义两个变量及两个指针变量并用户输入值
    int a,b;
    int *p1,*p2;
    scanf("%d,%d",&a,&b);
    //指针变量赋值
    p1=&a;
    p2=&b;
    //如果a<b，就调用函数，并使用指针变量作实参
    if(a<b) swap(p1,p2);
    printf("max=%d,min=%d\n",a,b);
    return 0;
}
void swap(int *p1,int *p2){ //形参是指针的变量
    int *p;
    //交换p1和p2的值
    p=p1;
    p1=p2;
    p2=p;
}
例5：输入3个整数a,b,c,要求从大到小的顺序将它们输出，用函数实现。
#include<stdio.h>
int main(){
    /*
     * 采用8.3的方法在函数中改变这3个变量的值，用swap函数交换两个变量的值，用exchange函数改变这3个变量的值
     */
    //函数声明
    void exchange(int *q1,int *q2,int *q3);
    //变量声明
    int a,b,c,*p1,*p2,*p3;
    //用户输入a,b,c三个值
    scanf("%d,%d,%d",&a,&b,&c);
    //指针变量进行赋值
    p1=&a;
    p2=&b;
    p3=&c;
    //调用exchange()
    exchange(p1,p2,p3);
    return 0;
}
//定义exchange()函数
void exchange(int *p1,int *p2,int *p3){
    //申明需要调用的swap()函数
    void swap(int *pt1,int pt2);
    if(*p1<*p2) swap(p1,p2);
    if(*p1<*p3) swap(p1,p3);
    if(*p2<*p3) swap(p2,p3);
}
//定义swap()函数用于交换两个数的值
void swap(int *pt1,int *pt2){
    int temp;
    temp = *pt1;
    *pt1=*pt2;
    *pt2=temp;
}
8.3、通过指针应用数组
#include<stdio.h>
int main(){
    /*
     * 采用8.3的方法在函数中改变这3个变量的值，用swap函数交换两个变量的值，用exchange函数改变这3个变量的值
     */
    //函数声明
    void exchange(int *q1,int *q2,int *q3);
    //变量声明
    int a,b,c,*p1,*p2,*p3;
    //用户输入a,b,c三个值
    scanf("%d,%d,%d",&a,&b,&c);
    //指针变量进行赋值
    p1=&a;
    p2=&b;
    p3=&c;
    //调用exchange()
    exchange(p1,p2,p3);
    return 0;
}
//定义exchange()函数
void exchange(int *p1,int *p2,int *p3){
    //申明需要调用的swap()函数
    void swap(int *pt1,int pt2);
    if(*p1<*p2) swap(p1,p2);
    if(*p1<*p3) swap(p1,p3);
    if(*p2<*p3) swap(p2,p3);
}
//定义swap()函数用于交换两个数的值
void swap(int *pt1,int *pt2){
    int temp;
    temp = *pt1;
    *pt1=*pt2;
    *pt2=temp;
}
8.3、通过指针引用数组元素
引用数组中各元素的值有3种方法：
     * 		(1):下标法，如a[3]
     * 		(2):通过数组名计算数组元素地址，找出元素的值
     * 		(3):用指针变量指向数组元素。
例6：有个整型数组a,有10个元素，要求输出数组中的全部元素。
#include<stdio.h>
//下标法：  
int main(){
    /*
     * 下标法
     */
    int a[10] = {1,2,3,4,54,6,7,8,9,10};
    int i;
    //下标法输出数组
    for(i=0;i<10;i++){
	printf("%d\n",a[i]);
    }
    return 0;
}
//通过输出名计算数组元素地址，找出元素的值
#include<stdio.h>
int main(){
    //通过输出名计算数组元素地址，找出元素的值
    int a[10] = {1,2,3,4,54,6,7,8,9,10};
    //通过数组名计算数组元素地址，找出元素的值
    for(int i=0;i<10;i++){
	printf("%d",*(a+i));
    }
    return 0;
}
//指针指向当前数组元素
#include<stdio.h>
int main(){
    //用指针变量指向数组元素
    int a[10] = {1,2,3,4,54,6,7,8,9,10};
    //定义指针变量
    int *p;
    for(p=a;p<(a+10);p++){
	printf("%d",*p);	//指针指向当前的数组元素
    }
    return 0;
}
例7：通过指针变量输出整型数组a的10个元素。
#include<stdio.h>
int main(){
    //定义数组，指针变量
    int *p,a[10]={1,2,3,4,54,6,7,8,9,10};
    p=a;		//指向a[0]
    //输出a[0]-a[9]
    for(int i=0;i<10;i++,p++){
	printf("%d ",*p);
    }
    return 0;
}
8.3.4、用数组名作函数参数
例8：将数组a中n个整数按相反顺序存放。
#include<stdio.h>
int main(){
    /*
     * 思路：将a[0]与a[n-1]对换，然后将a[2]与a[n-2]进行对换，
     * 	   直到将a[int(n-1)/2]与a[n-int((n-1/2)-1)]对换。
     * 	   调用inv()函数
     */
    //定义函数
    void inv(int arr[],int n);
    //定义数组
    int a[10]={1,2,3,4,54,6,7,8,9,10};
    //调用inv()函数，使得数组元素，反转
    inv(a,10);
    //将处理后的数组输出
    for(int i=0;i<10;i++){
	    printf("%d  ",a[i]);
    }
    return 0;
}
void inv(int arr[],int n){
    /*
     * 方案一：正常数组赋值形式改变
     */
    int m=(n-1)/2 ,temp;
    //遍历数组，将数组元素倒换
    for(int i=0;i<=m;i++){
      //值进行倒换
      temp =arr[i];
      arr[i]=arr[n-1-i];;
      arr[n-1-i] = temp;
    }
    /*
     * 方案二：改变指针指向
     */
    //定义指针
    int *p,temp,*i,*j,m=(n-1)/2;
    //定义指针指向
    i=arr;	//从0往后指
    j=arr+n-1;	//从后往前指
    p=arr+m;	//数组长度
    for(;i<=p;i++,j--){
      //*i与*j进行交换
      temp=*i;
      *i=*j;
      *j=temp;
    }
}
例9：改写例8.8，用指针变量作实参
#include<stdio.h>
int main(){
    //函数进行声明
    void inv(int *arr,int n);
    //定义变量
    int i,*p,arr[10]; 			//={1,2,3,4,54,6,7,8,9,10}
    for(i=0;i<10;i++,p++){
	scanf("%d",p);			//输入arr数组的元素
    }
    p=arr;				//指针p重新指向arr[0]
    //调用函数
    inv(p,10);
    //指针形式输出
    for(p=arr;p<arr+10;p++){
	printf("%d ",p);
    }
    return 0;
}
//定义inv函数，形参x是指针变量
void inv(int *x,int n){
    int *p,m,temp,*i,*j;
    m=(n-1)/2;
    //指针指向赋值
    i=x;		//i指向指向指针变量x,及a[0]
    j=x+n-1;		//j为后面的往前面的指针的位置
    p=x+m;		//为数组需要执行的次数，x=a[0],m为中间数的位置
    for(;i<=p;i++,j--){
      //换值
      temp = *i;
      *i=*j;
      *j=temp;
    }
}
例10：用指针的方法对10个整数按由大到小顺序排序
#include<stdio.h>
int main(){
    /*
     * 思路：主函数中定义数组a的10个整数，定义int *型指针变量p指向a[0]
     *    定义函数sort()是数字a中的元素按由大到小排序；
     *    在主函数中调用sort()函数用指针变量p做实参
     *    sort()函数的形参用数组名，
     *    用选择法进行排序
     */
    //声明函数
    void sort(int x[],int n);
    //定义变量，指针变量等
    int i,*p,arr[10];
    p=arr;
    //arr[10]={1,2,3,4,54,6,7,8,9,10}
    //用户输入数组元素
    for(i=0;i<10;i++){
	    scanf("%d",p++);
    }
    p=arr;			//指针p重新指向arr[0]
    //调用函数
    sort(p,10);
    //指针输出排序后的10个数组元素
    for(p=arr,i=0;i<10;i++){
      printf("%d",*p);
      p++;
    }
    return 0;
}
//方案一：数组做形参
void sort(int x[],int n){		//定义sort函数，x是形参数组名
    int i,j,k,t;			//定义变量
    for(i=0;i<n-1;i++){			//遍历数组for循环，n-1=9
      k=i;				//初始化k的值为每次循环的i
      for(j=i+1;j<n;j++){		//第二次for循环，及每次获取i后面的那个数
          if(x[j]>x[k]){		//如果前一个数大于后一个数，对k重新赋值，且如果k!=i就将两个值进行换
            k=j;
            if(k!=i){
                t=x[i];
                x[i]=x[k];
                x[k]=t;
            }
          }
      }
    }
}
//方案二：指针变量形式
void sort(int *x,int n){	//形参x为指针变量
    int i,j,k,t;
    for(i=0;i<n-1;i++){
      k=i;
      for(j=i+1;j<n;j++){
          if(*(x+j)>*(x+k)){	//*(x+j) 即为x[j]
            k=j;
            if(k!=i){
                t=*(x+i);
                *(x+i)=*(x+k);
                *(x+k)=t;
            }
          }
      }
    }
}
8.3.5、通过指针引用多维数组
例11：输出二维数组的有关数据（地址和值）
#include<stdio.h>
int main(){
    //定义二维数组
    int a[3][4]={1,3,5,7,9,11,13,15,17,19,21,23};
    //o行首地址，和0行0列元素地址
    printf("o行首地址:%d,0行0列元素地址:%d\n",a,*a);    //相同
    //0行0列元素地址
    printf("0行0列元素地址：%d,%d\n",a[0],*(a+0));	//相同
    //0行首地址和0行0列元素地址
    printf("0行首地址：%d,0行0列元素地址：%d\n",&a[0],&a[0][0]);
    //1行0列元素地址和1行首地址
    printf("1行0列元素地址:%d,1行首地址:%d\n",a[1],a+1);
    //1行0列元素地址
    printf("1行0列元素地址：%d,%d\n",&a[1][0],*(a+1)+0);
    //2行0列元素地址
    printf("2行0列元素地址：%d,%d\n",a[2],*(a+2));
    //2行首地址
    printf("2行首地址：%d,%d\n",&a[2],a+2);
    //1行0列元素值
    printf("1行0列元素值:%d,%d\n",a[1][0],*(*(a+1)+0));
    //2行0列元素的值
    printf("2行0列元素的值：%d,%d",*a[2],*(*(a+2)+0));
    return 0;
}
2、指向多维数组元素的指针变量
例12：有一个3x5的二维数组，要求用指向元素的指针变量输出二维数组各元素的值。
#include<stdio.h>
int main(){
    /*
     * 思路：二维数组的元素是整型的，它相当与整型变量，可以用int*型指针变量指向它，
     * 	   二维数组的元素在内存中中是按行的顺序排放的，即存完序号为0的行中的全部元素后，接着存放序号为1的行的全部怒元素，
     * 	   因此用一个指向整型元素的指针变量，一次指向各个元素。
     */
    //定义二维数组
    int arr[3][4] = {1,3,5,7,9,11,13,15,17,19,21,23};
    //定义指针变量 *p
    int * p;
    //for循环，使p依次指向下一个元素
    for(p=arr[0];p<arr[0]+12;p++){
      //p向后移动4个元素后换行
      if((p-arr[0]) %4==0){
          printf("\n");
	    }
      //输出指针指向的元素
      printf("%4d",*p);
    }
    return 0;
}
例13：输出二维数组任一行任一列元素的值
#include<stdio.h>
int main(){
    /*
     * 假设任然用例12程序中的二维数组，例12中定义的指针变量是指向变量或数组元素的，
     * 现改用指向一维数组的指针变量
     * 总结：int (*p)[4];	//指针变量p指向包含4个整型元素的一维数组。
     * 			1.表示(*p)有4个元素，每个元素为整型。
     * 			2.此时p只能指向一个包含4个元素的一维数组，而不能指向一维数组中的某个元素
     */
    //定义二维数组
    int arr[3][4] = {1,3,5,7,9,11,13,15,17,19,21,23},i,j;
    //定义指针变量，指向包含4个整型元素的一维数组
    int (*p)[4];	//指针变量p指向包含4个整型元素的一维数组。表示(*p)有4个元素，每个元素为整型。

    p=arr;		//p指向二维数组的0行
    //用户输入要求输出的行和列
    scanf("%d,%d",&i,&j);
    printf("a[%d,%d]=%d\n",i,j,*(*(p+i)+j));	//输出a[i][j]的值
    return 0;
}
#include<stdio.h>
int main(){
    /*
     *	与上例不同的是，此例中的数组是一维数组，
     *	但定义的指针指向是一样的。
     *	所以此处p指向的是数组中首位元素的地址。
     *
     */
    int a[4]={1,3,5,7};		//定义一维数组a包含4个元素
    int (*p)[4];		//定义指针包含4个元素的一维数组的指针变量
    p=&a;			//p指向一维数组
    printf("%d\n",(*p)[3]);	//输出a[3]

    return 0;
}
3、用指向数组的指针做函数的参数
例14：有一个班3个学生，各学4门课，计算总平均分数以及第n个学生的成绩
#include<stdio.h>
int main(){
    /*
     * 思路：用指向数组的指针做函数参数，用函数average求平均成绩，用函数search找出并输出第i个学生的成绩
     */
    //声明函数
    void average(float *p,int n);
    void search(float (*p)[4],int n);
    //定义分数数组
    float score[3][4] = {{65,67,68,68},{25,26,29,27},{35,37,39,36}};
    //调用函数
    average(score,10);		//求12个分数的平均分
    search(score,2);		//求序号为2的学生的成绩
    return 0;
}
void average(float *p,int n){	//定义求平均成绩的函数
    //定义平均分，总分数
    float aver,sum=0;
    float *p_end = p+n-1;   	//n的值为12时，p_end的值是p+11,指向最后一个元素
    for(;p<=p_end;p++){
	    sum+=(*p);		//总分数
    }
    aver = sum/n;		//计算平均分
    printf("平均分=%5.2f\n",aver);
}
void search(float (*p)[4],int n){
    int i;
    printf("这个分数为%d\n",n);
    for(i=0;i<4;i++){
	    printf("%5.2f\n",*(*(p+n)+i));
    }
}
例15：在上题基础上，查找有一门以上课程不及格的学生，输出他们全部课程的成绩。
#include<stdio.h>
int main(){
    /*
     * 思路：用指向数组的指针做函数参数，用函数average求平均成绩，用函数search找出并输出第i个学生的成绩
     */
    void search(float (*p)[4],int n);		//函数声明
    float score[3][4] = {{65,67,68,68},{25,26,29,27},{35,37,39,36}};
    search(score,3);				//调用search函数
    return 0;
}
void search(float (*p)[4],int n){		//形参p是指向包含4个float型元素的一维数组的指针变量
    int i,j,flag;
    for(j=0;j<n;j++){
      flag=0;
      for(i=0;i<4;i++){
          if(*(*(p+j)+i)<100)flag=1;
      }
      if(flag == 1){
          printf("%f号的成绩是：\n",j+1);
          for(i=0;i<4;i++){
            printf("%5.1f",*(*(p+j)+i));	//输出*(*(p+j)i)就是输出score[j][i]的值
          }
	    }
    }
}







































