1.什么是算法？试从日常生活中找3个例子，描述他们的算法。
答：为解决一个问题而采用的方法和步骤，就称为算法。
例子：1.刷牙：先拿起牙刷，在拿起牙膏，然后将牙膏挤出在牙刷上，抬手将牙刷放入口中，左右上下刷。
     2.买菜：先进超市，对菜进行挑选，称重，付钱，带回家。
     3.....
2. 什么叫结构化的算法？为什么要提倡结构化的算法？
答：结构化算法：是由一些基本结构顺序组成的，基本结构之间不存在向前或向后的跳转，流程的转移只存在于一个基本的结构范围内，一个非结构的算法可以用一个等价结构化算法代替，功能不变。
    提倡使用结构化算法：A.直观形象易于理解;B.紧凑易画，整个结构都是由上倒下
    跟结构化算法比较起来,非结构化算法有以下缺点：
    流程不受限制的随意转来转去,使流程图豪无规律.使人在阅读的时候难以理解算法的逻辑.难以阅读,也难以修改.从而使算法的可靠性和可维护性难以保证.
3.试述3种基本结构的特点，请另外设计两种基本结构（要符合基本结构的特点）。
答： 1.顺序结构：是一种线性，有序的结构，它依次执行各语句模块。
     2.循环结构：重复执行一个或几个模块，直到满足一条件为止。
     3.选择结构：依据条件成立与否选择程序执行的通路。
4.用传统流程图表示算法？
  (1)有两个瓶子A和B,分别存放醋和酱油，要求他们互换。
  (2)依次输入10个数，要求输出其中最大的数。
  (3)有3个数，按大小顺序将他们输出。
  (4)求1+2+...+100.
  (5)判断一个数n能否同时被3和5整除。
  (6)将100-200之间的素数输出。
  (7)求两个数m和n的最大公约数。
  (8)求方程式ax^2+bx+c=0的两个根，分别考虑，a,有两个不等的实根；b,有两个相等的实根。
5.用N-S图表示第四题中的算法。   
6.用伪代码表示第四题中的算法。
7.什么叫结构化程序设计？它的主要内容是什么？
答：就是使用计算机语言表示的结构化算法，
    主要内容：1、自顶向下；2、逐步细化；3、模块化设计；4、结构化编码。
8.用自顶向下，逐步细化的方法进行以下算法的设计：
  (1)输出1900-2000年中闰年的年份符合以下两条件之一的为闰年：
      a.能被4整除，但不能被100整除 b.能被100整除且能被400整除。
  #include<stdio.h>
int main(){
    int init_year,last_year,year;
    get_leap_year();
    init_year = 1900,last_year=2000;
    for(int i=1900;i<2000;i++){
    year = get_leap_year(i);
    if(year ==0) continue;
    printf("是闰年的年份有：%d\n",year);
    }

    return 0;
}
int get_leap_year(int x){
    /*
     * 用于获取闰年的年份
     */
    int year;
    if((x%4 == 0 && x%100 !=0)||x%100 == 0 && x%400 ==0) year=x;
    return year;
}
  (2)求ax^2+bx+c=0的根，分别考虑d=b^2-4ac大于0，等于0个小于0这三种状况。  
  #include<stdio.h>
int main(){
    char * str;
    int a,b,c,x,y;
    scanf("%d,%d,%d",&a,&b,&c);
    int num = b^2-4*a*c;
    if(num>0){
	str = "两个根";
    }else if(num < 0){
	str = "无解";
    }else str = "一个根";
    printf(str);
    return 0;
}
  (3)输入10个数，输出其中最大的一个数。
  /*
 *  8.3：输入10个数，输出其中最大的一个数。
 *  	思路：假设max是数组的第一个数为最大值，遍历数组，每个数都与max比较，大于的就赋值给max,小于就过。
 */


#include<stdio.h>
int main(){

    int num[10];
    int max;
    for(int i=0;i<10;i++){
	scanf("%d,",&num[i]);
    }
    max = num[0];//设max = num[0]
    for(int j=0;j<10;j++){
	if(max<num[j]){
	    max = num[j];
	}
    }
    printf("最大值为:%d",max);
    return 0;
}
  
