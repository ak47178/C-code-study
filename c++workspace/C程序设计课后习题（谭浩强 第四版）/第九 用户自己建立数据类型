九、用户自己建立数据类型
1.定义和使用结构体变量
1.1自己建立结构类型
1.2定义结构体类型变量
例1：把一个学生的信息（包括学号，姓名，性别，住址）放在一个结构体变量中，然后输出这个学生的信息。
#include<stdio.h>
int main(){
  struct Student{
	long int num;
	char name[20];
	char sex;
	char addr[20];
    }a = {10101,"li lin",'M',"123 Beijing road"};
  printf(" NO:%d\n name:%s\n sex:%c\n address:%s\n",a.num,a.name,a.sex,a.addr);
  return 0;
}
例2：输入两个学生的学号，姓名和成绩，输出成绩较高的学生的学号，姓名和成绩
#include<stdio.h>
int main(){
    /*
     * 思路：定义两个结构相同的结构体变量student1和student2
     * 	   分别输入两个学生的学号，姓名，成绩
     * 	   比较连个学生的成绩，如果学生1的成绩高于学生2的成绩，就输入学生1的全部信息，
     * 	   反之输出学生2的成绩，
     * 	   如果两个学生成绩相等，则输出两个学生的全部信息
     */
    struct Student{		//什么结构体类型
	int num;
	char name[20];
	float score;
    }student1,student2;		//定义两个结构体变量student1 和student2
    //输入学生1和学生2的成绩
    scanf("%d%s%f",&student1.num,student1.name,&student1.score);
    scanf("%d%s%f",&student2.num,student2.name,&student2.score);
    //对两个学生的成绩进行比较，并按要求输出学生的信息
    if(student1.score>student2.score){
	printf("%d%s%f",student1.num,student1.name,student1.score); //结构体的调用
    }else if(student2.score>student1.score){
	printf("%d%s%f",student2.num,student2.name,student2.score);
    }else{
	printf("%d%s%f",student1.num,student1.name,student1.score);
	printf("%d%s%f",student2.num,student2.name,student2.score);
    }
    return 0;
}
总结分析：关键是要理解结构体的使用，定义多个结构体变量，结构体变量的调用。
9.2结构体使用数组
9.2.1结构体定义数组
例3：有3个候选人，每个选民只能投票选一个人，要求编一个统计选票的程序，旋后输入被选人的名字，最后输入各人的票结果
#include<stdio.h>
#include<string.h>
struct Person{				//声明结构体类型struct Person
    char name[20];			//候选人姓名
    int count;				//候选人得票数
}leader[3]={"li",0,"zhang",0,"sun",0};	//定义结构数组并初始化
int main(){
    /*
     * 显然，需要建设一个结构体数组，数组中包含3个元素，每个元素的信息应包含候选人的姓名(字符型)和得票数（整型），
     * 输入备选人的姓名，然后与数组元素中的”姓名“成员比较，如果相同，就给这个元素中的”得票数“成员的值加1.
     * 最后输出所有元素的信息
     */
    int i,j;
    char leader_name[20];		//定义字符数组
    for(i=1;i<=10;i++){
	scanf("%s",leader_name);
	for(j=0;j<3;j++){		//输入所选的候选人姓名
	    if(strcmp(leader_name,leader[j].name)==0){
		leader[j].count++;
	    }
	}
    }
    //输出结构
    printf("\nresult:\n");
    for(i=0;i<3;i++){
	printf("%5s:%d\n",leader[i].name,leader[i].count);
    }
    return 0;
}
9.2.2结构体数组的应用举例
例4：有n个学生的信息（包括学号，姓名，成绩）要求按照成绩的高低顺序输出个学生的信息。
#include<stdio.h>
struct Student{
    int num;
    char name[20];
    float score;
};
int main(){
    /*
     * 用结构体数组存放n个学生信息，采用选择法对个元素进行排序（进行比较的是个元素中的成绩）。
     */
    struct Student stu[5]={		//定义结构体类型student Student
	    {10101,"zhang",78},
	    {10103,"wang",89},
	    {10106,"li",96},
	    {10108,"Ling",57},
	    {10110,"sun",100}};
    //定义结构体变量temp,用作交换时的临时变量
    struct Student temp;
    //定义常变量n
    const int n=5;
    int i,j,k;
    printf("The order is:\n");
    for(i=0;i<n-1;i++){
	k=i;
	for(j=i+1;j<n;j++){
	    if(stu[j].score>stu[k].score){//成绩比较
		k=j;
		temp=stu[k];
		stu[k]=stu[i];
		stu[i]=temp;		//stu[k]和stu[i]元素互换
	    }
	}
    }
    for(i=0;i<n;i++){
	printf("%6d %8s %6.2f\n",stu[i].num,stu[i].name,stu[i].score);
	printf("\n");
    }
    return 0;
}
9.3.1指向结构体变量的指针
例5：通过指向结构体变量的指针变量输出结构体变量中成员的信息。
#include<stdio.h>
#include<string.h>
int main(){
    /*
     * 思路：在已有的基础上本题要解决两个问题
     * 	   1.怎样对结构体成员变量赋值
     * 	   2.怎样通过指向结构体变量的指针访问结构体变量中成员。
     */
    //定义结构体
    struct Student{
	long num;
	char name[20];
	char sex;
	float score;
    };
    //定义结构体变量
    struct Student stu1;
    //定义结构体指针变量
    struct Student *p;
    //p指向stu1
    p=&stu1;
    //对结构体变量的成员进行赋值
    stu1.num=10101;
    //用字符串复制函数给stu1.name进行赋值
    strcpy(stu1.name,"Li Lin");
    stu1.sex='M';
    stu1.score=98;
    //输出结果
    printf("No:%d\nname:%s\nsex:%c\nscore:%f\n",stu1.num,stu1.name,stu1.sex,stu1.score);
    //指针引用输出结果
    printf("No:%d\nname:%s\nsex:%c\nscore:%f\n",(*p).num,(*p).name,(*p).sex,(*p).score);
    return 0;
}
例6：有3个学生的信息，放在结构体数组中要求输出全部学生的信息
#include<stdio.h>
struct Student{     		//定义结构体类型
    int num;
    char name[20];
    char sex;
    int age;
};
//定义结构体数组
struct Student stu[3] = {{10101,"Junk",'M',78},{10103,"Twang",'G',89},{10106,"Lit",'M',96}};
int main(){
    /*
     * 思路：用指向结构体变量的指针来处理
     * 	   (1)、声明结构体类型struct Student,并定义结构体数组，同时使之出始化
     * 	   (2)、定义一个指向struct Student类型数据的指针变量p
     * 	   (3)、使p指向结构体数组的首元素，输出他指向的元素中的有关信息
     * 	   (4)、使p指向结构体数组的下一个元素，输出他指向的元素中的有关信息
     * 	   (5)、在使p指向结构体数组的下一个元素，输出他指向的元素中的有关信息
     */
    //定义指针变量指向struct　student 的指针变量
    struct Student *p;
    //使用指针输出结果
    printf("No.  name  sex  age:\n");
    for(p=stu;p<stu+3;p++){
	printf("%5d %-20s %2c %4d\n",p->num,p->name,p->sex,p->age);
    }
    return 0;
}
例7：有n个结构体变量，内含学生学号，姓名和3门课程的成绩，要求输出平均成绩最高的学生的信息（包括学号、姓名、3门课程成绩和平均成绩）
#include<stdio.h>
#define N 3
struct Student{
    int num;
    char name[20];
    float score[3];
    float aver;
};
int main(){
    /*
     * 思路：将n个学生的数据表示为结构体数组（有n个元素），按照功能函数化的思想，分别用3个函数来实现不同的功能
     *     (1):用input 函数来输入数据和求各位学生的平均成绩
     *     (2):用max函数来找平均成绩最高的学生
     *     (3):用print()函数来输出成绩最高学生的成绩
     *    在主函数中先后调用这3个函数，用指向结构体变量的指针作实参。最后得到结果。
     *
     */
    //对需要调用的函数进行声明
    void input(struct Student stu[]);
    struct Student max(struct Student stu[]);
    void print(struct Student stu);
    //定义结构体数组和指针
    struct Student stu[N],*p=stu;
    //调用函数进行处理
    input(p);
    print(max(p));
    return 0;
}
void input(struct Student stu[]){
    /*
     * 用于接收数据并计算平均值
     */
    int i;
    printf("请输入各学生的学号，姓名，三门课成绩:\n");
    for(i=0;i<N;i++){
	scanf("%d %s %f %f %f",&stu[i].num,&stu[i].name,&stu[i].score[0],&stu[i].score[1],&stu[i].score[2]);
	stu[i].aver=(stu[i].score[0]+stu[i].score[1]+stu[i].score[2])/3.0;
    }
}
struct Student max(struct Student stu[]){
    /*
     * max()函数，用于找出平均分最大的学生
     */
    int i ,m=0;
    for(i=0;i<N;i++){
	if(stu[i].aver>stu[m].aver){
	    return stu[m];
	}
    }
}
void print(struct Student stud){
    //输出数据
    printf("\n成绩最高的学生是：\n");
    printf("学号：%d\n 姓名：%s\n三门课成绩:%5.1f,%5.1f,%5.1f\n平均成绩%6.2f\n",stud.num,stud.name,stud.score[0],stud.score[1],stud.score[2],stud.aver);
}

