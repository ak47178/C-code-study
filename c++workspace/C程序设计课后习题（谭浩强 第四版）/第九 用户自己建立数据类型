九、用户自己建立数据类型
1.定义和使用结构体变量
1.1自己建立结构类型
1.2定义结构体类型变量
例1：把一个学生的信息（包括学号，姓名，性别，住址）放在一个结构体变量中，然后输出这个学生的信息。
/*
 * 第10章
 * 例1：把一个学生的信息（包括学号，姓名，性别，住址）放在一个变量体中然后输出这个学生的信息
 * 思路：(1)构建一个变量体包含学号，姓名，性别，住址
 *     (2)声明结构体变量，并对该变量进行赋值
 */
struct Student{
    int num;
    char name[20];
    char sex;
    char addr[50];
}stu={1001,"Li",'n',"sdjfiowe"};
int main(){
    printf("num=%d\n name=%s\n sex=%c\n addr=%s\n",stu.num,stu.name,stu.sex,stu.addr );
    return 0;
}
//总结：单字符数据的接收和输出都要用%c.
#include<stdio.h>
int main(){
  struct Student{
	long int num;
	char name[20];
	char sex;
	char addr[20];
    }a = {10101,"li lin",'M',"123 Beijing road"};
  printf(" NO:%d\n name:%s\n sex:%c\n address:%s\n",a.num,a.name,a.sex,a.addr);
  return 0;
}
总结：struct结构体类型可以在main函数中直接定义，但常用的话是定义在mian函数之前。


例2：输入两个学生的学号，姓名和成绩，输出成绩较高的学生的学号，姓名和成绩
#include<stdio.h>
int main(){
    /*
     * 思路：定义两个结构相同的结构体变量student1和student2
     * 	   分别输入两个学生的学号，姓名，成绩
     * 	   比较连个学生的成绩，如果学生1的成绩高于学生2的成绩，就输入学生1的全部信息，
     * 	   反之输出学生2的成绩，
     * 	   如果两个学生成绩相等，则输出两个学生的全部信息
     */
    struct Student{		//什么结构体类型
	int num;
	char name[20];
	float score;
    }student1,student2;		//定义两个结构体变量student1 和student2
    //输入学生1和学生2的成绩
    scanf("%d%s%f",&student1.num,student1.name,&student1.score);
    scanf("%d%s%f",&student2.num,student2.name,&student2.score);
    //对两个学生的成绩进行比较，并按要求输出学生的信息
    if(student1.score>student2.score){
	printf("%d%s%f",student1.num,student1.name,student1.score); //结构体的调用
    }else if(student2.score>student1.score){
	printf("%d%s%f",student2.num,student2.name,student2.score);
    }else{
	printf("%d%s%f",student1.num,student1.name,student1.score);
	printf("%d%s%f",student2.num,student2.name,student2.score);
    }
    return 0;
}
总结分析：关键是要理解结构体的使用，定义多个结构体变量，结构体变量的调用。
9.2结构体使用数组
9.2.1结构体定义数组
例3：有3个候选人，每个选民只能投票选一个人，要求编一个统计选票的程序，旋后输入被选人的名字，最后输入各人的票结果
#include<stdio.h>
#include<string.h>
struct Person{				//声明结构体类型struct Person
    char name[20];			//候选人姓名
    int count;				//候选人得票数
}leader[3]={"li",0,"zhang",0,"sun",0};	//定义结构数组并初始化
int main(){
    /*
     * 显然，需要建设一个结构体数组，数组中包含3个元素，每个元素的信息应包含候选人的姓名(字符型)和得票数（整型），
     * 输入备选人的姓名，然后与数组元素中的”姓名“成员比较，如果相同，就给这个元素中的”得票数“成员的值加1.
     * 最后输出所有元素的信息
     */
    int i,j;
    char leader_name[20];		//定义字符数组
    for(i=1;i<=10;i++){
	scanf("%s",leader_name);
	for(j=0;j<3;j++){		//输入所选的候选人姓名
	    if(strcmp(leader_name,leader[j].name)==0){
		leader[j].count++;
	    }
	}
    }
    //输出结构
    printf("\nresult:\n");
    for(i=0;i<3;i++){
	printf("%5s:%d\n",leader[i].name,leader[i].count);
    }
    return 0;
}
/*
 * 第10章
 * 例2：有三个候选人每个选民只能投票选伊人，要求编写一个统计选票的程序，先后输入被选人的名字，最后输出个人的票结果
 * 思路：(1)先创建结构体包含姓名和票数,要先对其进行初始化
 *     (2)main函数中对for循环进行投票
 *     (3)使用for循环对数据进行输出
 *
 */
#include<stdio.h>
#include<string.h>
struct Student{
    char name[20];
    int count;
}stu[3]={"Li",0,"Qo",0,"Yi",0};
int main(){
    //for循环输入票
    int i,j;
    char s_name[20];
    printf("请投票");
    for(i=0;i<5;i++){//假设有5个人投票
	gets(s_name);
	for (j = 0; j < 3; j++)
	    if (strcmp(s_name, stu[j].name) == 0)
		stu[j].count++;
    }
    //输出最终的票数
    for(i=0;i<3;i++)
	printf("%s,%d",stu[i].name,stu[i].count);
    return 0;
}
/*总结：1。在输出数据时，需要两层for循环，一层是用与控制用户数，另一层则是控制结构体变量数组。
 *    2.比较两个字符串的大小，使用strcmp()函数。
 */
9.2.2结构体数组的应用举例
例4：有n个学生的信息（包括学号，姓名，成绩）要求按照成绩的高低顺序输出个学生的信息。
#include<stdio.h>
struct Student{
    int num;
    char name[20];
    float score;
};
int main(){
    /*
     * 用结构体数组存放n个学生信息，采用选择法对个元素进行排序（进行比较的是个元素中的成绩）。
     */
    struct Student stu[5]={		//定义结构体类型student Student
	    {10101,"zhang",78},
	    {10103,"wang",89},
	    {10106,"li",96},
	    {10108,"Ling",57},
	    {10110,"sun",100}};
    //定义结构体变量temp,用作交换时的临时变量
    struct Student temp;
    //定义常变量n
    const int n=5;
    int i,j,k;
    printf("The order is:\n");
    for(i=0;i<n-1;i++){
	k=i;
	for(j=i+1;j<n;j++){
	    if(stu[j].score>stu[k].score){//成绩比较
		k=j;
		temp=stu[k];
		stu[k]=stu[i];
		stu[i]=temp;		//stu[k]和stu[i]元素互换
	    }
	}
    }
    for(i=0;i<n;i++){
	printf("%6d %8s %6.2f\n",stu[i].num,stu[i].name,stu[i].score);
	printf("\n");
    }
    return 0;
}
/*
 * 总结：选择法排序：先将数组中最小的元素与a[0]对换，在将a[1]-a[9]中最小的与a[1]对换，循环下去，每次从未排序的元素中找到最小的数。
 * 	(1)两层for循环，外层循环为以排序的数，因为最后一个数不需要在进行比较，所以是n-1次
 * 	(2)二层循环，用与控制为参与排序的数，起点自然是i+1-n.
 * 	(3)二层循环外定义k=i;
 * 	(4)二层循环中未排序数据与已排序数据进行比较，然后跟换下标
 * 	(5)一层for循环下，借用temp来进行换值操作。
 */
 
9.3.1指向结构体变量的指针
例5：通过指向结构体变量的指针变量输出结构体变量中成员的信息。
#include<stdio.h>
#include<string.h>
int main(){
    /*
     * 思路：在已有的基础上本题要解决两个问题
     * 	   1.怎样对结构体成员变量赋值
     * 	   2.怎样通过指向结构体变量的指针访问结构体变量中成员。
     */
    //定义结构体
    struct Student{
	long num;
	char name[20];
	char sex;
	float score;
    };
    //定义结构体变量
    struct Student stu1;
    //定义结构体指针变量
    struct Student *p;
    //p指向stu1
    p=&stu1;
    //对结构体变量的成员进行赋值
    stu1.num=10101;
    //用字符串复制函数给stu1.name进行赋值
    strcpy(stu1.name,"Li Lin");
    stu1.sex='M';
    stu1.score=98;
    //输出结果
    printf("No:%d\nname:%s\nsex:%c\nscore:%f\n",stu1.num,stu1.name,stu1.sex,stu1.score);
    //指针引用输出结果
    printf("No:%d\nname:%s\nsex:%c\nscore:%f\n",(*p).num,(*p).name,(*p).sex,(*p).score);
    return 0;
}
例6：有3个学生的信息，放在结构体数组中要求输出全部学生的信息
#include<stdio.h>
struct Student{     		//定义结构体类型
    int num;
    char name[20];
    char sex;
    int age;
};
//定义结构体数组
struct Student stu[3] = {{10101,"Junk",'M',78},{10103,"Twang",'G',89},{10106,"Lit",'M',96}};
int main(){
    /*
     * 思路：用指向结构体变量的指针来处理
     * 	   (1)、声明结构体类型struct Student,并定义结构体数组，同时使之出始化
     * 	   (2)、定义一个指向struct Student类型数据的指针变量p
     * 	   (3)、使p指向结构体数组的首元素，输出他指向的元素中的有关信息
     * 	   (4)、使p指向结构体数组的下一个元素，输出他指向的元素中的有关信息
     * 	   (5)、在使p指向结构体数组的下一个元素，输出他指向的元素中的有关信息
     */
    //定义指针变量指向struct　student 的指针变量
    struct Student *p;
    //使用指针输出结果
    printf("No.  name  sex  age:\n");
    for(p=stu;p<stu+3;p++){
	printf("%5d %-20s %2c %4d\n",p->num,p->name,p->sex,p->age);
    }
    return 0;
}
例7：有n个结构体变量，内含学生学号，姓名和3门课程的成绩，要求输出平均成绩最高的学生的信息（包括学号、姓名、3门课程成绩和平均成绩）
#include<stdio.h>
#define N 3
struct Student{
    int num;
    char name[20];
    float score[3];
    float aver;
};
int main(){
    /*
     * 思路：将n个学生的数据表示为结构体数组（有n个元素），按照功能函数化的思想，分别用3个函数来实现不同的功能
     *     (1):用input 函数来输入数据和求各位学生的平均成绩
     *     (2):用max函数来找平均成绩最高的学生
     *     (3):用print()函数来输出成绩最高学生的成绩
     *    在主函数中先后调用这3个函数，用指向结构体变量的指针作实参。最后得到结果。
     *
     */
    //对需要调用的函数进行声明
    void input(struct Student stu[]);
    struct Student max(struct Student stu[]);
    void print(struct Student stu);
    //定义结构体数组和指针
    struct Student stu[N],*p=stu;
    //调用函数进行处理
    input(p);
    print(max(p));
    return 0;
}
void input(struct Student stu[]){
    /*
     * 用于接收数据并计算平均值
     */
    int i;
    printf("请输入各学生的学号，姓名，三门课成绩:\n");
    for(i=0;i<N;i++){
	scanf("%d %s %f %f %f",&stu[i].num,&stu[i].name,&stu[i].score[0],&stu[i].score[1],&stu[i].score[2]);
	stu[i].aver=(stu[i].score[0]+stu[i].score[1]+stu[i].score[2])/3.0;
    }
}
struct Student max(struct Student stu[]){
    /*
     * max()函数，用于找出平均分最大的学生
     */
    int i ,m=0;
    for(i=0;i<N;i++){
	if(stu[i].aver>stu[m].aver){
	    return stu[m];
	}
    }
}
void print(struct Student stud){
    //输出数据
    printf("\n成绩最高的学生是：\n");
    printf("学号：%d\n 姓名：%s\n三门课成绩:%5.1f,%5.1f,%5.1f\n平均成绩%6.2f\n",stud.num,stud.name,stud.score[0],stud.score[1],stud.score[2],stud.aver);
}
9.4.2建立简单的静态链表
例8：建立如图9.9所示的简单链表，它由三个学生数据的结点组成，要求输出各结点中的数据。
#include<stdio.h>
struct Student{				//定义结构体变量
    int num;
    float score;
    struct Student *next;		//定义next指针变量
};
int main(){
    /*
     * 思路：声明一个结构体类型，其成员包括num(学号)，score(分数)，next（指针变量），
     * 	       将第一个结点的起始地址赋给头指针head,
     * 	  将第二个结点的起始地址赋给第1个结点的next成员
     * 	  将第三个结点的起始地址赋给第2个结点的next成员，
     * 	  第3个结点的next成员赋值null.
     */
    struct Student a,b,c,*head,*p;	//声明结构体变量，指针变量等
    a.num=1001;a.score=98.5;		//对结构体成员变量进行赋值
    b.num=1002;b.score=65.3;
    c.num=1003;c.score=45.7;
    head=&a;				//将结点a的起始地址赋值给头指针head
    a.next=&b;				//将结点b的起始位置赋值给a结点的next成员
    b.next=&c;				//将节点c的起始位置赋值给b结点的next成员
    c.next=NULL;			//结点c的next成员不存放其他节点的地址
    p=head;				//使p也指向a结点
    do{
	printf("%d %5.1f \n",p->num,p->score);//输出p指向结点的数据
	p=p->next;			//使p指向下一个结点
    }while(p!=NULL);			//输出完c结点后p的值为NULL,终止循环
    return 0;
}
9.4.3建立动态链表
例9:写一个函数建立一个有3名学生数据的单向动态链表
#include<stdio.h>
#include<stdlib.h>
#define LEN sizeof(struct Student)  		//动态计算数据类型的大小
struct Student{
    long num;
    float score;
    struct Student *next;
};
int n;
struct Student *creat(void){
    struct Student *head;
    struct Student *p1,*p2;
    n=0;
    p1=p2=(struct Student*) malloc(LEN);	//开辟一个新单元
    scanf("%d,%f",&p1->num，&p1->score);		//输入第一个学生的学号和成绩
    head=NULL;
    while(p1->num!=0){
	n=n+1;
	if(n==1)head == p1;
	else p2->next =p1;
	p2=p1;
	p1=(struct Student *)malloc(LEN);	//动态开辟内存区，把起始地址赋给p1
	scanf("%d,%f",*p1->num,&p1->score);	//输入其他学生的学号和成绩
    }
    p2->next=NULL;
    return head;
}
int main(){
    struct Strudent *pt;
    pt=create();
    printf("num:%d\nscore:%5.1f",pt->num,pt->score);	//输出第一个结点的成员值
    return 0;
}
9.4.4输出链表
例10：编写一个输出链表的函数print.
#include<stdio.h>
#include<stdlib.h>
#define LEN sizeof(struct Student)  		//动态计算数据类型的大小
struct Student{
    long num;
    float score;
    struct Student *next;
};
int n;
void print(struct Student *head){
    struct Student *p;
    printf("these records are:\n",n);
    p=head;
    if(head!=NULL){
	do{
	    pritnf("%d ,%f",p->num,p->score);
	    p=p->next;
	}while(p!=NULL);
    }
}
struct Student *creat(void){
    struct Student *head;
    struct Student *p1,*p2;
    n=0;
    p1=p2=(struct Student*) malloc(LEN);	//开辟一个新单元
    scanf("%d,%f",&p1->num,&p1->score);		//输入第一个学生的学号和成绩
    head=NULL;
    while(p1->num!=0){
	n=n+1;
	if(n==1) head = p1;
	else p2->next =p1;
	p2=p1;
	p1=(struct Student *)malloc(LEN);	//动态开辟内存区，把起始地址赋给p1
	scanf("%d,%f",*p1->num,&p1->score);	//输入其他学生的学号和成绩
    }
    p2->next=NULL;
    return head;
}
int main(){
    struct Strudent *head;
    head=create();
    print(head);
    return 0;
}
9.5共同体类型
例11：有若干人员数据，其中有学生和教师，学生的数据包括：姓名，号码，性别，职业，班级。教师的数据包括:姓名，号码，性别，职业，职务。要求用同一个表格来处理
#include<stdio.h>
struct{
    int num;
    char name[10];
    char sex;
    char job;
    union {				//借助union 将一个表中不同的字段分开
	int class;
	char position[10];
    }category;
}person[2];
int main(){
    int i;
    //输入两个人的数据信息
    for(i=0;i<2;i++){
	printf("please enter the data of person:\n");
	//输入前4项数据
	scanf("%d %s %c %c",&person[i].num,person[i].name,&person[i].sex,&person[i].job);
	if(person[i].job == 's'){ //如果是学生就输入班级
	    scanf("%d",&person[i].category.class);
	}else if(person[i].job=='t'){
	    scanf("%s",person[i].category.position);
	}else{
	    printf("input error ");
	}
    }
    printf("\n");
    // 输出数据
    for(i=0;i<2;i++){
	if(person[i].job=='s'){		//若是学生
	    printf("%-6d%-10s%-4c%-4c%-10d\n",person[i].num,person[i].name,person[i].sex,person[i].job,person[i].category.class);
	}else
	    printf("%-6d%-10s%-4c%-4c%-10s\n",person[i].num,person[i].name,person[i].sex,person[i].job,person[i].category.position);
    }
    return 0;
}
9.6使用枚举类型
例12：口袋中有红，黄，蓝，绿白，黑5中颜色的求若干个，每次从口袋中先后取出3个球问得到三种不同的颜色的求的可能取法取，输出每种排列的情况。
#include<stdio.h>
int main(){
    //定义枚举类型
    enum Color{
	red ,yellow,blue,white,black
    };
    enum Color i,j,k,pri;
    int n, loop;
    n=0;
    for(i=red;i<=black;i++){
	for(j=red;j<black;j++){
	    if(i!=j){
		for(k=red;k<=black;k++){
		    if((k!=i)&& (k!=j)){
			n=n+1;
			printf("%-4d",n);
			for(loop=1;loop<=3;loop++){
			    switch(loop){
			    case 1:pri=i;break;
			    case 2:pri=j;break;
			    case 3:pri=k;break;
			    default:break;
			    }
			    switch(pri){
			    case red:printf("%-10s","red");break;
			    case yellow:printf("%-10s","yellow");break;
			    case blue:printf("%-10s","blue");break;
			    case white:printf("%-10s","white");break;
			    case black:printf("%-10s","black");break;
			    default:break;
			    }
			}
		    printf("\n");
		    }
		}
	    }
	}
    }
    printf("\n total :%5d\n",n);
    return 0;
}
9.7使用typeof声明新类型名

